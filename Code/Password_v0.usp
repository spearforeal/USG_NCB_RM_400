#SYMBOL_NAME "Password_v0"
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#DEFINE_CONSTANT MAXVALUE 16
DIGITAL_INPUT Store, Recall, Enter, Clear, Stars, Keypad[10];
STRING_INPUT BackDoor$[MAXVALUE];
STRING_INPUT UserPinIn$[MAXVALUE];
DIGITAL_OUTPUT Store_FB, Stored, Pass, Fail, Stars_FB;
ANALOG_OUTPUT Fails;
STRING_OUTPUT Password$;
INTEGER Mode, FailCount, MaskOn, KPad[10];
STRING Comp$[MAXVALUE], Pwrd$[MAXVALUE], UserPin$[MAXVALUE], MasterPin$[MAXVALUE];
FUNCTION ClearFx()
{
	Mode = 0; 
	Store_FB = Mode;
	Comp$ = "";
	Pwrd$ = "";
	Password$ = Pwrd$;
}
FUNCTION ApplyMask()
{
	INTEGER i; 
	Pwrd$ = "";
	if(MaskOn && (len(Comp$) > 0))
	{
		for (i = 1 to Len(Comp$))
		{
			Pwrd$ = Pwrd$ + "*";
		}
	}
	else
	{
		Pwrd$ = Comp$;
	}
	Password$ = Pwrd$;
	
}
RELEASE Store{Mode = 1; Store_FB = 1;}
RELEASE Recall{Mode = 0; Store_FB = 0;}
RELEASE Keypad
{
	INTEGER i;
	i = GetLastModifiedArrayIndex();
	if(Len(Comp$) < MAXVALUE)
	{
		Comp$ = Comp$ + itoa(KPad[i]);
	}
	else
	{
		Comp$ = Right(Comp$, (MAXVALUE - 1)) + itoa(KPad[i]);
		//Pwrd$= Comp$;
	}
	ApplyMask();
}
RELEASE Enter
{
	if(Mode)
	{
		UserPin$ = Comp$;
		ClearFx();
		Pulse(20, Stored);
	}
	else
	{
		if((Comp$ = UserPin$) || (Comp$ = MasterPin$))
		{
			Pulse(20, Pass);
			FailCount = 0;
			Fails = FailCount;
			ClearFx();
		}
		else
		{
			Pulse(20, Fail);
			FailCount = FailCount + 1;
			Fails = FailCount;
			Comp$ = "";
			ApplyMask();
		}
	}
}
RELEASE Clear {ClearFx();}
PUSH Stars {MaskOn = 1; Stars_FB = MaskOn; ApplyMask();}
RELEASE Stars {MaskOn = 0; Stars_FB = MaskOn; ApplyMask();}
CHANGE BackDoor$ {MasterPin$ = BackDoor$;}
CHANGE UserPinIn$ {UserPin$ = UserPinIn$;}
FUNCTION Main()
{
	INTEGER i;
	ClearFx();
	WaitForInitializationComplete();
	Mode= 0;
	Store_FB = Mode;
	FailCount = 0;
	Fails = FailCount;
	for(i = 1 to 9)
	{
		KPad[i] = i;
	}
	KPad[10] = 0;
	
}
